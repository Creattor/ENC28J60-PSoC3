C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\cyfitter_cfg.lst) CD DB 
                    -NOIP OT(0,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.1 Early Access
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0
  26          #define CYCLOCKSTART_XTAL_ERROR  1
  27          #define CYCLOCKSTART_32KHZ_ERROR 2
  28          #define CYCLOCKSTART_PLL_ERROR   3
  29          
  30          /*******************************************************************************
  31          * Function Name: CyClockStartupError
  32          ********************************************************************************
  33          * Summary:
  34          *  If an error is encountered during clock configuration (crystal startup error,
  35          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  36          *  the customer, an infinite loop will be encountered.
  37          *
  38          * Parameters:  
  39          *   void
  40          *
  41          * Return:
  42          *   void
  43          *
  44          *******************************************************************************/
  45          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  48          static void CyClockStartupError(uint8 errorCode)
  49          {
  50   1          /* To remove the compiler warning if errorCode not used.                */
  51   1          errorCode = errorCode;
  52   1      
  53   1          /* `#START CyClockStartupError` */
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 2   

  54   1      
  55   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  56   1          /* we will end up here to allow the customer to implement something to  */
  57   1          /* deal with the clock condition.                                       */
  58   1      
  59   1          /* `#END` */
  60   1      
  61   1          /* If nothing else, stop here since the clocks have not started         */
  62   1          /* correctly.                                                           */
  63   1          while(1) {}
  64   1      }
  65          
  66          
  67          #undef CYCODE
  68          #undef CYDATA
  69          #undef CYXDATA
  70          #undef CYFAR
  71          #if defined(__C51__) || defined(__CX51__)
  72                  #define CYCODE code
  73                  #define CYDATA data
  74                  #define CYXDATA xdata
  75                  #define CYFAR far
  76          
  77                  #define CYPACKED
  78                  #define CYALIGNED
  79              
  80                  #define CY_CFG_MEMORY_BARRIER()
  81          
  82                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  87          
  88          
  89                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  90                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  91                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  92          #else
                      #error Unsupported toolchain
              #endif
  95          
  96          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
  97          typedef struct {
  98                  void CYFAR *address;
  99                  uint16 size;
 100          } CYPACKED cfg_memset_t;
 101          
 102          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 103          typedef struct {
 104                  void CYFAR *dest;
 105                  const void CYCODE *src;
 106                  uint16 size;
 107          } CYPACKED cfg_memcpy_t;
 108          
 109          /* Contains the regions of memory that must be set to 0 during configuration */
 110          #define CFG_MEMSET_COUNT (sizeof(cfg_memset_list)/sizeof(*cfg_memset_list))
 111          static const cfg_memset_t CYCODE cfg_memset_list [] = {
 112                  /* address, size */
 113                  {(void CYFAR *)(CYREG_PRT1_DR), 16},
 114                  {(void CYFAR *)(CYREG_PRT3_DR), 64},
 115                  {(void CYFAR *)(CYREG_PRT12_DR), 16},
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 3   

 116                  {(void CYFAR *)(CYREG_PRT15_DR), 16},
 117                  {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 128},
 118                  {(void CYFAR *)(CYDEV_UCFG_B0_P0_ROUTE_BASE), 3840},
 119                  {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048},
 120                  {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560},
 121                  {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512},
 122                  {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32},
 123          };
 124          
 125          const uint8 CYCODE cfg_byte_table[] = {
 126                  0x0D,
 127                  0x00, 0x52, 0x02, /* Base address 0x005200 */
 128                  /* CYDEV_PRTDSI_PRT0_BASE */
 129                  0x00, 0x02, 0x01, 0x03, 
 130                  0x00, 0x64, 0x01, /* Base address 0x006400 */
 131                  /* CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 */
 132                  0x81, 0x0F, 
 133                  0x01, 0x00, 0x0D, /* Base address 0x010000 */
 134                  /* CYDEV_UCFG_B0_P0_U0_BASE */
 135                  0x05, 0x08, 0x07, 0x01, 0x0D, 0x02, 0x0F, 0x05, 0x15, 0x0D, 0x17, 0x02, 0x2D, 0x08, 0x33, 0x0E, 
 136                  0x37, 0x01, 0x3B, 0x08, 0x3F, 0x40, 0x59, 0x04, 0x5F, 0x01, 
 137                  0x01, 0x01, 0x30, /* Base address 0x010100 */
 138                  /* CYDEV_UCFG_B0_P0_ROUTE_BASE */
 139                  0x04, 0x41, 0x06, 0x08, 0x07, 0x20, 0x0E, 0xAA, 0x16, 0x01, 0x17, 0x14, 0x1D, 0x03, 0x1E, 0x20, 
 140                  0x21, 0x04, 0x22, 0x40, 0x23, 0x20, 0x24, 0x51, 0x25, 0x08, 0x26, 0x06, 0x27, 0x40, 0x2A, 0x40, 
 141                  0x2D, 0x81, 0x31, 0x08, 0x37, 0x65, 0x38, 0x40, 0x39, 0x08, 0x3C, 0x11, 0x3E, 0x04, 0x3F, 0x80, 
 142                  0x45, 0x0A, 0x47, 0x20, 0x4D, 0x20, 0x4E, 0x02, 0x4F, 0x08, 0x56, 0x6A, 0x57, 0xC0, 0x65, 0x04, 
 143                  0x6C, 0x04, 0x6D, 0x01, 0x6E, 0x86, 0x6F, 0x15, 0x74, 0x80, 0x75, 0x80, 0x76, 0x01, 
 144                  /* CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080 */
 145                  0xC0, 0xF0, 0xC2, 0xF0, 0xC4, 0xE0, 0xCA, 0x98, 0xCC, 0xF2, 0xCE, 0xFA, 0xD0, 0xE0, 0xD2, 0x30, 
 146                  0xD8, 0x40, 
 147                  0x01, 0x02, 0x30, /* Base address 0x010200 */
 148                  /* CYDEV_UCFG_B0_P1_U0_BASE */
 149                  0x00, 0x11, 0x02, 0x02, 0x04, 0x4D, 0x05, 0x20, 0x07, 0xD0, 0x08, 0x02, 0x09, 0x55, 0x0A, 0x34, 
 150                  0x0B, 0xAA, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x40, 0x10, 0x02, 0x12, 0x0D, 0x16, 0x20, 0x19, 0x94, 
 151                  0x1A, 0x40, 0x1B, 0x69, 0x1C, 0x4D, 0x1D, 0x33, 0x1F, 0xC4, 0x20, 0x4D, 0x24, 0x02, 0x26, 0x38, 
 152                  0x28, 0x4D, 0x30, 0x0F, 0x32, 0x30, 0x33, 0xF0, 0x34, 0x40, 0x37, 0x0F, 0x39, 0x80, 0x3A, 0x02, 
 153                  0x3B, 0x08, 0x3E, 0x10, 0x54, 0x40, 0x58, 0x04, 0x59, 0x04, 0x5B, 0x04, 0x5F, 0x01, 
 154                  /* CYDEV_UCFG_B0_P1_U1_BASE */
 155                  0x80, 0x01, 0x88, 0x01, 0xA8, 0x01, 0xB6, 0x01, 0xBE, 0x40, 0xD4, 0x09, 0xD8, 0x04, 0xDB, 0x04, 
 156                  0xDF, 0x01, 
 157                  0x01, 0x03, 0x2D, /* Base address 0x010300 */
 158                  /* CYDEV_UCFG_B0_P1_ROUTE_BASE */
 159                  0x00, 0x10, 0x03, 0x40, 0x04, 0x18, 0x07, 0x41, 0x0C, 0x80, 0x0D, 0x20, 0x0E, 0x50, 0x0F, 0x08, 
 160                  0x13, 0x20, 0x15, 0x09, 0x17, 0x10, 0x18, 0x01, 0x1E, 0x50, 0x1F, 0x10, 0x25, 0x4C, 0x31, 0x0C, 
 161                  0x37, 0x60, 0x3C, 0x10, 0x3D, 0x88, 0x58, 0x20, 0x59, 0x09, 0x5A, 0x80, 0x60, 0x01, 0x66, 0x60, 
 162                  0x67, 0x20, 
 163                  /* CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080 */
 164                  0x85, 0x20, 0x90, 0x18, 0x91, 0x09, 0x92, 0x80, 0x99, 0x09, 0x9A, 0x20, 0x9B, 0x71, 0x9D, 0x24, 
 165                  0xA0, 0x80, 0xA2, 0x10, 0xA3, 0x84, 0xA9, 0x08, 0xAA, 0x02, 0xC0, 0xFA, 0xC2, 0xF0, 0xC4, 0x72, 
 166                  0xCC, 0x30, 0xCE, 0x70, 0xD6, 0x0F, 0xD8, 0x78, 
 167                  0x01, 0x04, 0x04, /* Base address 0x010400 */
 168                  /* CYDEV_UCFG_B0_P2_U1_BASE */
 169                  0xB9, 0x08, 0xBF, 0x04, 0xD9, 0x04, 0xDF, 0x01, 
 170                  0x01, 0x05, 0x08, /* Base address 0x010500 */
 171                  /* CYDEV_UCFG_B0_P2_ROUTE_BASE */
 172                  0x27, 0x20, 
 173                  /* CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080 */
 174                  0xAA, 0x10, 0xAD, 0x20, 0xAE, 0x40, 0xB2, 0x10, 0xB4, 0x20, 0xB7, 0x80, 0xEA, 0x80, 
 175                  0x01, 0x07, 0x01, /* Base address 0x010700 */
 176                  /* CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080 */
 177                  0xAB, 0x20, 
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 4   

 178                  0x01, 0x41, 0x08, /* Base address 0x014100 */
 179                  /* CYDEV_UCFG_DSI1_BASE */
 180                  0x03, 0x08, 0x57, 0x01, 0x5B, 0x24, 
 181                  /* CYDEV_UCFG_DSI1_BASE + 0x00000080 */
 182                  0x87, 0x08, 0xC0, 0x40, 0xD4, 0x80, 0xD6, 0x60, 0xE4, 0x40, 
 183                  0x01, 0x42, 0x04, /* Base address 0x014200 */
 184                  /* CYDEV_UCFG_DSI2_BASE + 0x00000080 */
 185                  0x9F, 0x04, 0xAB, 0x20, 0xB3, 0x01, 0xEA, 0x80, 
 186                  0x01, 0x43, 0x02, /* Base address 0x014300 */
 187                  /* CYDEV_UCFG_DSI3_BASE + 0x00000080 */
 188                  0xAB, 0x04, 0xEA, 0x80, 
 189                  0x01, 0x50, 0x03, /* Base address 0x015000 */
 190                  /* CYREG_BCTL0_MDCLK_EN */
 191                  0x00, 0x01, 0x02, 0x14, 0x08, 0x01, 
 192          };
 193          /* BYTES: 414 */
 194          
 195          /* UDB_1_5_1_CONFIG Address: CYDEV_UCFG_B0_P0_U1_BASE Size (bytes): 128 */
 196          static const uint8 CYCODE BS_UDB_1_5_1_CONFIG_VAL[] = {
 197                  0x04, 0x32, 0x00, 0xC0, 0x56, 0x92, 0x09, 0x04, 0x60, 0x21, 0x00, 0xD2, 0x07, 0x04, 0x38, 0x00, 
 198                  0x04, 0x92, 0x80, 0x04, 0x01, 0x04, 0x00, 0x92, 0x0A, 0xFA, 0x10, 0x05, 0x84, 0x07, 0x00, 0x68, 
 199                  0x00, 0x96, 0x00, 0x00, 0x80, 0x00, 0x04, 0x00, 0x84, 0x00, 0x00, 0x00, 0x84, 0x96, 0x00, 0x00, 
 200                  0x80, 0x07, 0x7F, 0x1D, 0x00, 0x00, 0x00, 0xE0, 0x08, 0x00, 0x00, 0x88, 0x00, 0x00, 0x01, 0x00, 
 201                  0x32, 0x05, 0x40, 0x00, 0x06, 0x0D, 0xFC, 0xEB, 0x3D, 0xFF, 0xFF, 0xFF, 0x22, 0x00, 0xF0, 0x08, 
 202                  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x28, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 
 203                  0x00, 0x00, 0xC0, 0x00, 0x40, 0x01, 0x10, 0x11, 0xC0, 0x01, 0x00, 0x11, 0x40, 0x01, 0x40, 0x01, 
 204                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 205          
 206          /* IOPINS0_0 Address: CYREG_PRT0_DR Size (bytes): 10 */
 207          static const uint8 CYCODE BS_IOPINS0_0_VAL[] = {
 208                  0x60, 0x00, 0x04, 0x63, 0x63, 0x00, 0x23, 0x00, 0x00, 0x00};
 209          
 210          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 211          static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 212                  0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00};
 213          
 214          #define CFG_MEMCPY_COUNT (sizeof(cfg_memcpy_list)/sizeof(*cfg_memcpy_list))
 215          static const cfg_memcpy_t CYCODE cfg_memcpy_list [] = {
 216                  /* dest, src, size */
 217                  {(void CYFAR *)(CYDEV_UCFG_B0_P0_U1_BASE), BS_UDB_1_5_1_CONFIG_VAL, 128},
 218          };
 219          
 220          
 221          extern void cfg_write_bytes_code(void CYCODE *table);
 222          extern void cfg_write_bytes(void CYFAR *table);
 223          
 224          /*******************************************************************************
 225          * Function Name: ClockSetup
 226          ********************************************************************************
 227          *
 228          * Summary:
 229          *  Performs the initialization of all of the clocks in the device based on the
 230          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 231          *  clocks and setting the necessary dividers to produce the desired frequency. 
 232          *
 233          * Parameters:
 234          *  void
 235          *
 236          * Return:
 237          *  void
 238          *
 239          *******************************************************************************/
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 5   

 240          static void ClockSetup(void)
 241          {
 242   1              reg32  timeout;
 243   1              reg32* timeout_p = &timeout;
 244   1              reg8   pllLock;
 245   1      
 246   1      
 247   1              /* Configure Digital Clocks based on settings from Clock DWR */
 248   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x180002);
 249   1      
 250   1              /* Configure ILO based on settings from Clock DWR */
 251   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 252   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 253   1      
 254   1              /* Configure XTAL based on settings from Clock DWR */
 255   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_XMHZ_CFG0), 0x3316);
 256   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_XMHZ_CSR), 0x01);
 257   1              /* Wait up to 130000us for the XTAL to lock */
 258   1              CY_GET_REG8(CYREG_FASTCLK_XMHZ_CSR);
 259   1              for (timeout = 130000 / 10; *timeout_p && (CY_GET_REG8(CYREG_FASTCLK_XMHZ_CSR) & 0x80u); timeout--) { 
 260   2                      
 261   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 262   2              }
 263   1              if (*timeout_p == 0)
 264   1                      CyClockStartupError(CYCLOCKSTART_XTAL_ERROR);
 265   1      
 266   1              /* Configure PLL based on settings from Clock DWR */
 267   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0D27);
 268   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x09);
 269   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 270   1              /* Wait up to 250us for the PLL to lock */
 271   1              pllLock = 0;
 272   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 273   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 274   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 275   2              }
 276   1      
 277   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 278   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100);
 279   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x49);
 280   1      
 281   1              /* Configure IMO based on settings from Clock DWR */
 282   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x20);
 283   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 284   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 285   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 286   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 287   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 288   1      
 289   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x01)));
 290   1      }
 291          
 292          
 293          /* Analog API Functions */
 294          
 295          /*******************************************************************************
 296          * Function Name: AnalogSetDefault
 297          ********************************************************************************
 298          *
 299          * Summary:
 300          *  Sets up the analog portions of the chip to default values based on chip
 301          *  configuration options from the project.
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 6   

 302          *
 303          * Parameters:
 304          *  void
 305          *
 306          * Return:
 307          *  void
 308          *
 309          *******************************************************************************/
 310          void AnalogSetDefault(void)
 311          {
 312   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u);
 313   1              CY_SET_REG8(CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 314   1              CY_SET_REG8(CYREG_BG_DFT1, (bg_xover_inl_trim >> 4) & 0x0Fu);
 315   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 316   1      }
 317          
 318          
 319          /*******************************************************************************
 320          * Function Name: SetAnalogRoutingPumps
 321          ********************************************************************************
 322          *
 323          * Summary:
 324          * Enables or disables the analog pumps feeding analog routing switches.
 325          * Intended to be called at startup, based on the Vdda system configuration;
 326          * may be called during operation when the user informs us that the Vdda voltage crossed the pump threshold
             -.
 327          *
 328          * Parameters:
 329          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 330          *
 331          * Return:
 332          *  void
 333          *
 334          *******************************************************************************/
 335          void SetAnalogRoutingPumps(uint8 enabled)
 336          {
 337   1              uint8 regValue = CY_GET_REG8(CYREG_PUMP_CR0);
 338   1              if (enabled)
 339   1                      regValue |= 0x00;
 340   1              else
 341   1                      regValue &= ~0x00;
 342   1              CY_SET_REG8(CYREG_PUMP_CR0, regValue);
 343   1      }
 344          
 345          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 346          
 347          
 348          /*******************************************************************************
 349          * Function Name: cyfitter_cfg
 350          ********************************************************************************
 351          * Summary:
 352          *  This function is called by the start-up code for the selected device. It
 353          *  performs all of the necessary device configuration based on the design
 354          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 355          *  as Clocks and Pins as well as any component configuration that is necessary.
 356          *
 357          * Parameters:  
 358          *   void
 359          *
 360          * Return:
 361          *   void
 362          *
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 7   

 363          *******************************************************************************/
 364          void cyfitter_cfg(void)
 365          {
 366   1      
 367   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 368   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xF1 : 0xC0));
 369   1              /* Setup clocks based on selections from Clock DWR */
 370   1              ClockSetup();
 371   1              /* Disable unused USB pad to reduce current draw */
 372   1              CY_SET_REG8(CYREG_PM_USB_CR0, CY_GET_REG8(CYREG_PM_USB_CR0) & ~0x02);
 373   1      
 374   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 375   1              CY_SET_XTND_REG8(CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8(CYREG_MLOGIC_DEBUG) | 0x05));
 376   1      
 377   1              {
 378   2                      uint8 CYDATA i;
 379   2      
 380   2                      /* Zero out critical memory blocks before beginning configuration */
 381   2                      for (i = 0; i < CFG_MEMSET_COUNT; i++)
 382   2                      {
 383   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 384   3                              CYMEMZERO(ms->address, ms->size);
 385   3                      }
 386   2      
 387   2                      /* Copy device configuration data into registers */
 388   2                      for (i = 0; i < CFG_MEMCPY_COUNT; i++)
 389   2                      {
 390   3                              const cfg_memcpy_t CYCODE * CYDATA mc = &cfg_memcpy_list[i];
 391   3                              void * CYDATA dest = mc->dest;
 392   3                              const void CYCODE * CYDATA src = mc->src;
 393   3                              uint16 CYDATA size = mc->size;
 394   3                              CYCONFIGCPYCODE(dest, src, size);
 395   3                      }
 396   2      
 397   2                      cfg_write_bytes_code(cfg_byte_table);
 398   2      
 399   2                      /* Enable digital routing */
 400   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 401   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 402   2      
 403   2                      /* Enable UDB array */
 404   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 405   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 406   2              }
 407   1      
 408   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 409   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT0_DR), (void CYCODE *)(BS_IOPINS0_0_VAL), 10);
 410   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (void CYCODE *)(BS_IOPINS0_2_VAL), 8);
 411   1              CY_SET_REG8((void CYXDATA *)(CYREG_PWRSYS_WAKE_TR2), 0x3A);
 412   1      
 413   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40);
 414   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40);
 415   1      
 416   1              /* Perform basic analog initialization to defaults */
 417   1              AnalogSetDefault();
 418   1      
 419   1              /* Configure alternate active mode */
 420   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 14);
 421   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 422   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 48
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 51
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 63
000F 80FE              SJMP    ?C0001
0011         ?C0002:
                                           ; SOURCE LINE # 64
0011         ?C0003:
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F02              MOV     R7,#02H
0014 7E00              MOV     R6,#00H
0016 7D18              MOV     R5,#018H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 251
001D 904300            MOV     DPTR,#04300H
0020 7402              MOV     A,#02H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0023 904000            MOV     DPTR,#04000H
0026 7408              MOV     A,#08H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0029 7B00              MOV     R3,#00H
002B 7A42              MOV     R2,#042H
002D 7912              MOV     R1,#012H
002F 7D16              MOV     R5,#016H
0031 7C33              MOV     R4,#033H
0033 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 256
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 9   

0036 904210            MOV     DPTR,#04210H
0039 7401              MOV     A,#01H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
003C 904210            MOV     DPTR,#04210H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
                                           ; SOURCE LINE # 259
0041 7FC8              MOV     R7,#0C8H
0043 7E32              MOV     R6,#032H
0045 7D00              MOV     R5,#00H
0047 7C00              MOV     R4,#00H
0049 900000      R     MOV     DPTR,#timeout
004C 120000      E     LCALL   ?C?LSTXDATA
004F         ?C0004:
004F 900000      R     MOV     DPTR,#timeout_p
0052 E0                MOVX    A,@DPTR
0053 FE                MOV     R6,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 8F82              MOV     DPL,R7
0059 8E83              MOV     DPH,R6
005B 120000      E     LCALL   ?C?LLDXDATA
005E EC                MOV     A,R4
005F 4D                ORL     A,R5
0060 4E                ORL     A,R6
0061 4F                ORL     A,R7
0062 6033              JZ      ?C0005
0064 904210            MOV     DPTR,#04210H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 5480              ANL     A,#080H
006C FF                MOV     R7,A
006D 7E00              MOV     R6,#00H
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 6024              JZ      ?C0005
                                           ; SOURCE LINE # 261
0073 7FE0              MOV     R7,#0E0H
0075 7E01              MOV     R6,#01H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 262
007E         ?C0006:
007E 900000      R     MOV     DPTR,#timeout
0081 120000      E     LCALL   ?C?LLDXDATA
0084 7BFF              MOV     R3,#0FFH
0086 7AFF              MOV     R2,#0FFH
0088 79FF              MOV     R1,#0FFH
008A 78FF              MOV     R0,#0FFH
008C 120000      E     LCALL   ?C?LADD
008F 900000      R     MOV     DPTR,#timeout
0092 120000      E     LCALL   ?C?LSTXDATA
0095 80B8              SJMP    ?C0004
0097         ?C0005:
                                           ; SOURCE LINE # 263
0097 900000      R     MOV     DPTR,#timeout_p
009A E0                MOVX    A,@DPTR
009B FE                MOV     R6,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 10  

009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F 8F82              MOV     DPL,R7
00A1 8E83              MOV     DPH,R6
00A3 120000      E     LCALL   ?C?LLDXDATA
00A6 7B00              MOV     R3,#00H
00A8 7A00              MOV     R2,#00H
00AA 7900              MOV     R1,#00H
00AC 7800              MOV     R0,#00H
00AE C3                CLR     C
00AF 120000      E     LCALL   ?C?ULCMP
00B2 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 264
00B4 7F01              MOV     R7,#01H
00B6 120000      R     LCALL   _CyClockStartupError
00B9         ?C0007:
                                           ; SOURCE LINE # 267
00B9 7B00              MOV     R3,#00H
00BB 7A42              MOV     R2,#042H
00BD 7922              MOV     R1,#022H
00BF 7D27              MOV     R5,#027H
00C1 7C0D              MOV     R4,#0DH
00C3 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 268
00C6 904000            MOV     DPTR,#04000H
00C9 7409              MOV     A,#09H
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
00CC 7B00              MOV     R3,#00H
00CE 7A42              MOV     R2,#042H
00D0 7920              MOV     R1,#020H
00D2 7D51              MOV     R5,#051H
00D4 7C10              MOV     R4,#010H
00D6 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 271
00D9 900000      R     MOV     DPTR,#pllLock
00DC E4                CLR     A
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
00DE 7F19              MOV     R7,#019H
00E0 7E00              MOV     R6,#00H
00E2 7D00              MOV     R5,#00H
00E4 7C00              MOV     R4,#00H
00E6 900000      R     MOV     DPTR,#timeout
00E9 120000      E     LCALL   ?C?LSTXDATA
00EC         ?C0008:
00EC 900000      R     MOV     DPTR,#timeout_p
00EF E0                MOVX    A,@DPTR
00F0 FE                MOV     R6,A
00F1 A3                INC     DPTR
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 8F82              MOV     DPL,R7
00F6 8E83              MOV     DPH,R6
00F8 120000      E     LCALL   ?C?LLDXDATA
00FB EC                MOV     A,R4
00FC 4D                ORL     A,R5
00FD 4E                ORL     A,R6
00FE 4F                ORL     A,R7
00FF 604E              JZ      ?C0009
0101 900000      R     MOV     DPTR,#pllLock
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 11  

0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 EF                MOV     A,R7
0107 6403              XRL     A,#03H
0109 6044              JZ      ?C0009
                                           ; SOURCE LINE # 273
010B 904225            MOV     DPTR,#04225H
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 EF                MOV     A,R7
0111 5401              ANL     A,#01H
0113 FF                MOV     R7,A
0114 7E00              MOV     R6,#00H
0116 900000      R     MOV     DPTR,#pllLock
0119 E0                MOVX    A,@DPTR
011A FE                MOV     R6,A
011B EE                MOV     A,R6
011C 25E0              ADD     A,ACC
011E FE                MOV     R6,A
011F EE                MOV     A,R6
0120 4F                ORL     A,R7
0121 FF                MOV     R7,A
0122 EF                MOV     A,R7
0123 5403              ANL     A,#03H
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#pllLock
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
012B 7FE0              MOV     R7,#0E0H
012D 7E01              MOV     R6,#01H
012F 7D00              MOV     R5,#00H
0131 7C00              MOV     R4,#00H
0133 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 275
0136         ?C0010:
0136 900000      R     MOV     DPTR,#timeout
0139 120000      E     LCALL   ?C?LLDXDATA
013C 7BFF              MOV     R3,#0FFH
013E 7AFF              MOV     R2,#0FFH
0140 79FF              MOV     R1,#0FFH
0142 78FF              MOV     R0,#0FFH
0144 120000      E     LCALL   ?C?LADD
0147 900000      R     MOV     DPTR,#timeout
014A 120000      E     LCALL   ?C?LSTXDATA
014D 809D              SJMP    ?C0008
014F         ?C0009:
                                           ; SOURCE LINE # 278
014F 7B00              MOV     R3,#00H
0151 7A40              MOV     R2,#040H
0153 7904              MOV     R1,#04H
0155 7D00              MOV     R5,#00H
0157 7C01              MOV     R4,#01H
0159 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 279
015C 904000            MOV     DPTR,#04000H
015F 7449              MOV     A,#049H
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0162 904200            MOV     DPTR,#04200H
0165 7420              MOV     A,#020H
0167 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 12  

                                           ; SOURCE LINE # 283
0168 904004            MOV     DPTR,#04004H
016B 7407              MOV     A,#07H
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
016E 904006            MOV     DPTR,#04006H
0171 E4                CLR     A
0172 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0173 904008            MOV     DPTR,#04008H
0176 7448              MOV     A,#048H
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0179 904004            MOV     DPTR,#04004H
017C E4                CLR     A
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
017E 904001            MOV     DPTR,#04001H
0181 7402              MOV     A,#02H
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0184 9043A2            MOV     DPTR,#043A2H
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 EF                MOV     A,R7
018A 4401              ORL     A,#01H
018C FF                MOV     R7,A
018D EF                MOV     A,R7
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
018F         ?C0011:
018F 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 13  

0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0035         ?C0012:
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 335
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0013
                                           ; SOURCE LINE # 339
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
0025 800E              SJMP    ?C0014
0027         ?C0013:
                                           ; SOURCE LINE # 341
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
0035         ?C0014:
                                           ; SOURCE LINE # 342
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 14  

003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
003F         ?C0015:
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 368
0000 904800            MOV     DPTR,#04800H
0003 74C0              MOV     A,#0C0H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 372
0009 904394            MOV     DPTR,#04394H
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F 54FD              ANL     A,#0FDH
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0014 7B00              MOV     R3,#00H
0016 7A46              MOV     R2,#046H
0018 79E8              MOV     R1,#0E8H
001A 120000      E     LCALL   _cyread8
001D EF                MOV     A,R7
001E 4405              ORL     A,#05H
0020 FD                MOV     R5,A
0021 7B00              MOV     R3,#00H
0023 7A46              MOV     R2,#046H
0025 79E8              MOV     R1,#0E8H
0027 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 381
002A 750000      R     MOV     i,#00H
002D         ?C0016:
002D E500        R     MOV     A,i
002F C3                CLR     C
0030 940A              SUBB    A,#0AH
0032 503A              JNC     ?C0017
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0034 AF00        R     MOV     R7,i
0036 EF                MOV     A,R7
0037 75F005            MOV     B,#05H
003A A4                MUL     AB
003B 2400        R     ADD     A,#LOW cfg_memset_list
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        R     ADDC    A,#HIGH cfg_memset_list
0042 F583              MOV     DPH,A
0044 AF82              MOV     R7,DPL
0046 AE83              MOV     R6,DPH
0048 8E00        R     MOV     ms,R6
004A 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 384
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 15  

004C AE00        R     MOV     R6,ms
004E AF00        R     MOV     R7,ms+01H
0050 8F82              MOV     DPL,R7
0052 8E83              MOV     DPH,R6
0054 120000      E     LCALL   ?C?PLDCODE
0057 AE00        R     MOV     R6,ms
0059 AF00        R     MOV     R7,ms+01H
005B 8F82              MOV     DPL,R7
005D 8E83              MOV     DPH,R6
005F 7403              MOV     A,#03H
0061 93                MOVC    A,@A+DPTR
0062 FC                MOV     R4,A
0063 7404              MOV     A,#04H
0065 93                MOVC    A,@A+DPTR
0066 FD                MOV     R5,A
0067 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 385
006A         ?C0018:
006A 0500        R     INC     i
006C 80BF              SJMP    ?C0016
006E         ?C0017:
                                           ; SOURCE LINE # 388
006E 750000      R     MOV     i,#00H
0071         ?C0019:
0071 E500        R     MOV     A,i
0073 C3                CLR     C
0074 9401              SUBB    A,#01H
0076 5064              JNC     ?C0020
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0078 AF00        R     MOV     R7,i
007A EF                MOV     A,R7
007B 75F007            MOV     B,#07H
007E A4                MUL     AB
007F 2400        R     ADD     A,#LOW cfg_memcpy_list
0081 F582              MOV     DPL,A
0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH cfg_memcpy_list
0086 F583              MOV     DPH,A
0088 AF82              MOV     R7,DPL
008A AE83              MOV     R6,DPH
008C 8E00        R     MOV     mc,R6
008E 8F00        R     MOV     mc+01H,R7
                                           ; SOURCE LINE # 391
0090 AE00        R     MOV     R6,mc
0092 AF00        R     MOV     R7,mc+01H
0094 8F82              MOV     DPL,R7
0096 8E83              MOV     DPH,R6
0098 120000      E     LCALL   ?C?PLDCODE
009B 8B00        R     MOV     dest,R3
009D 8A00        R     MOV     dest+01H,R2
009F 8900        R     MOV     dest+02H,R1
                                           ; SOURCE LINE # 392
00A1 AE00        R     MOV     R6,mc
00A3 AF00        R     MOV     R7,mc+01H
00A5 8F82              MOV     DPL,R7
00A7 8E83              MOV     DPH,R6
00A9 7403              MOV     A,#03H
00AB 93                MOVC    A,@A+DPTR
00AC FE                MOV     R6,A
00AD 7404              MOV     A,#04H
00AF 93                MOVC    A,@A+DPTR
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 16  

00B0 FF                MOV     R7,A
00B1 8E00        R     MOV     src,R6
00B3 8F00        R     MOV     src+01H,R7
                                           ; SOURCE LINE # 393
00B5 AE00        R     MOV     R6,mc
00B7 AF00        R     MOV     R7,mc+01H
00B9 8F82              MOV     DPL,R7
00BB 8E83              MOV     DPH,R6
00BD 7405              MOV     A,#05H
00BF 93                MOVC    A,@A+DPTR
00C0 F500        R     MOV     size,A
00C2 7406              MOV     A,#06H
00C4 93                MOVC    A,@A+DPTR
00C5 F500        R     MOV     size+01H,A
                                           ; SOURCE LINE # 394
00C7 AB00        R     MOV     R3,dest
00C9 AA00        R     MOV     R2,dest+01H
00CB A900        R     MOV     R1,dest+02H
00CD AD00        R     MOV     R5,src+01H
00CF AC00        R     MOV     R4,src
00D1 AF00        R     MOV     R7,size+01H
00D3 AE00        R     MOV     R6,size
00D5 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 395
00D8         ?C0021:
00D8 0500        R     INC     i
00DA 8095              SJMP    ?C0019
00DC         ?C0020:
                                           ; SOURCE LINE # 397
00DC 7E00        R     MOV     R6,#HIGH cfg_byte_table
00DE 7F00        R     MOV     R7,#LOW cfg_byte_table
00E0 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 400
00E3 7B01              MOV     R3,#01H
00E5 7A50              MOV     R2,#050H
00E7 7903              MOV     R1,#03H
00E9 120000      E     LCALL   _cyread8
00EC EF                MOV     A,R7
00ED 4402              ORL     A,#02H
00EF FD                MOV     R5,A
00F0 7B01              MOV     R3,#01H
00F2 7A50              MOV     R2,#050H
00F4 7903              MOV     R1,#03H
00F6 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 401
00F9 7B01              MOV     R3,#01H
00FB 7A50              MOV     R2,#050H
00FD 7913              MOV     R1,#013H
00FF 120000      E     LCALL   _cyread8
0102 EF                MOV     A,R7
0103 4402              ORL     A,#02H
0105 FD                MOV     R5,A
0106 7B01              MOV     R3,#01H
0108 7A50              MOV     R2,#050H
010A 7913              MOV     R1,#013H
010C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 404
010F 9043A0            MOV     DPTR,#043A0H
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 EF                MOV     A,R7
0115 4440              ORL     A,#040H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 17  

0117 FF                MOV     R7,A
0118 9043A0            MOV     DPTR,#043A0H
011B EF                MOV     A,R7
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
011D 9043C2            MOV     DPTR,#043C2H
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 EF                MOV     A,R7
0123 4410              ORL     A,#010H
0125 FF                MOV     R7,A
0126 9043C2            MOV     DPTR,#043C2H
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 409
012B 7C00        R     MOV     R4,#HIGH BS_IOPINS0_0_VAL
012D 7D00        R     MOV     R5,#LOW BS_IOPINS0_0_VAL
012F 7B00              MOV     R3,#00H
0131 7A51              MOV     R2,#051H
0133 7900              MOV     R1,#00H
0135 7F0A              MOV     R7,#0AH
0137 7E00              MOV     R6,#00H
0139 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 410
013C 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
013E 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
0140 7B00              MOV     R3,#00H
0142 7A51              MOV     R2,#051H
0144 7922              MOV     R1,#022H
0146 7F08              MOV     R7,#08H
0148 7E00              MOV     R6,#00H
014A 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 411
014D 904689            MOV     DPTR,#04689H
0150 743A              MOV     A,#03AH
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
0153 7B01              MOV     R3,#01H
0155 7A50              MOV     R2,#050H
0157 7907              MOV     R1,#07H
0159 7D40              MOV     R5,#040H
015B 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 414
015E 7B01              MOV     R3,#01H
0160 7A50              MOV     R2,#050H
0162 7917              MOV     R1,#017H
0164 7D40              MOV     R5,#040H
0166 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 417
0169 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 420
016C 7B00              MOV     R3,#00H
016E 7A43              MOV     R2,#043H
0170 79A0              MOV     R1,#0A0H
0172 C003              PUSH    AR3
0174 C002              PUSH    AR2
0176 C001              PUSH    AR1
0178 7B00              MOV     R3,#00H
017A 7A43              MOV     R2,#043H
017C 79B0              MOV     R1,#0B0H
017E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/02/2012 19:50:17 PAGE 18  

0181 120000      E     LCALL   ?C?PSTXDATA
0184 D001              POP     AR1
0186 D002              POP     AR2
0188 D003              POP     AR3
018A 7F0E              MOV     R7,#0EH
018C 7E00              MOV     R6,#00H
018E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 421
0191 9043B0            MOV     DPTR,#043B0H
0194 E0                MOVX    A,@DPTR
0195 FF                MOV     R7,A
0196 EF                MOV     A,R7
0197 54FD              ANL     A,#0FDH
0199 FF                MOV     R7,A
019A 9043B0            MOV     DPTR,#043B0H
019D EF                MOV     A,R7
019E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
019F         ?C0022:
019F 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    952    ----
   CONSTANT SIZE    =    617    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
