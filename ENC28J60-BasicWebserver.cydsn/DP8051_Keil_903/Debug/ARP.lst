C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE ARP
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\ARP.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\ARP.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\ARP.lst) CD DB NOIP OT(0,SIZE) INCDIR(Generated_Source\P
                    -SoC3) OJ(.\DP8051_Keil_903\Debug\ARP.obj)

line level    source

   1          /*
   2           Network Stack for PSoC3-ENC28J60 hardware
   3           -----------------------------------------
   4           Title  : ARP Packet Handling functions
   5           Author : Kartik Mankad
   6           Date : 30-06-12
   7           This code is licensed as CC-BY-SA 3.0
   8           Description : This header file contains the functions required for
   9                         ARP Packet handling.
  10          */
  11          
  12          #include "IPStackMain.h"
  13          
  14          /*******************************************************************************
  15          * Function Name: SendArpRequest
  16          ********************************************************************************
  17          * Summary:
  18          *   Sends an ARP Request for the IP Address specified by targetIP.
  19          *
  20          * Parameters:
  21          *   targetIP - An array that holds the IP,whose hardware address is required.
  22          *              example: unsigned char routerIP={192,168,1,10};
  23          *
  24          * Returns:
  25          *   TRUE(0)- if the request was successfully transmitted.
  26          *   FALSE(1) - if the request was not successfully transmitted.
  27          *******************************************************************************/
  28          unsigned int SendArpRequest(unsigned char* targetIP){
  29   1      
  30   1          /*Lets declare a packet of structure type ARP*/
  31   1          ARP arpPacket;
  32   1          
  33   1          /*----Setup EtherNetII Header----*/
  34   1          /*The source of the packet will be the ENC28J60 mac address.*/
  35   1          memcpy( arpPacket.eth.SrcAddrs, deviceMAC,6 );
  36   1          
  37   1          /*The destination is broadcast,so thats a MAC Address of 
  38   1          0xFF:0xFF:0xFF:0xFF:0xFF:0xFF:0xFF */
  39   1          memset( arpPacket.eth.DestAddrs,0xFF, 6 );
  40   1          
  41   1          /*The type of packet being sent is an ARP*/
  42   1          arpPacket.eth.type = (ARPPACKET);
  43   1        
  44   1          /*----Setup ARP Header----*/
  45   1          arpPacket.hardware = (ETHERNET);
  46   1          
  47   1          /*We want an IP address resolved.*/
  48   1          arpPacket.protocol = (IPPACKET);
  49   1          arpPacket.hardwareSize = 0x06;
  50   1          arpPacket.protocolSize = 0x04;
  51   1          arpPacket.opCode = (ARPREQUEST);
  52   1        
  53   1          /*Target MAC is set to 0 as it is unknown.*/
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 2   

  54   1          memset( arpPacket.targetMAC, 0, 6 );
  55   1          
  56   1          /*Sender MAC is the ENC28J60's MAC address.*/
  57   1          memcpy( arpPacket.senderMAC, deviceMAC, 6 );
  58   1          
  59   1          /*The target IP is the IP address we want resolved.*/
  60   1          memcpy( arpPacket.targetIP, targetIP, 4);
  61   1          
  62   1          /*Sender IP will be the device IP*/
  63   1          memcpy( arpPacket.senderIP, deviceIP, 4);
  64   1          
  65   1          /*Send the Packet*/
  66   1          return(MACWrite((unsigned char*)&arpPacket,sizeof(ARP)));
  67   1      }
  68          
  69          /*******************************************************************************
  70          * Function Name: ReplyArpRequest
  71          ********************************************************************************
  72          * Summary:
  73          *   Replies to an ARP Request made to the ENC28J60's IP Address.
  74          *   This function creates an ARP Answer from the ARP request packet recd.
  75          *   This function must be called with an appropriate pointer to the same.
  76          *
  77          * Parameters:
  78          *   arpPacket - A pointer to the received ARP Request packet.
  79          *             
  80          * Returns:
  81          *   TRUE(0)- if the reply was successfully transmitted.
  82          *   FALSE(1) - if the reply was not successfully transmitted.
  83          *******************************************************************************/
  84          unsigned int ReplyArpRequest(ARP* arpPacket){
  85   1          /*
  86   1          Check if the ARP Request is directed at us,
  87   1          by checking the destination IP in the eth header.
  88   1          */
  89   1          
  90   1          if( !memcmp( arpPacket->targetIP, deviceIP, sizeof(deviceIP) ) ){
  91   2              /*Yes,the ARP Request is indeed directed at our device*/
  92   2          
  93   2              /*Swap the MAC Addresses in the ETH header*/
  94   2              memcpy( arpPacket->eth.DestAddrs, arpPacket->eth.SrcAddrs, sizeof(deviceMAC) );
  95   2              memcpy( arpPacket->eth.SrcAddrs, deviceMAC, sizeof(deviceMAC) );
  96   2              
  97   2              /*Swap the MAC Addresses in the ARP packet*/
  98   2              memcpy( arpPacket->targetMAC, arpPacket->senderMAC, sizeof(deviceMAC) );
  99   2              memcpy( arpPacket->senderMAC, deviceMAC, sizeof(deviceMAC) );
 100   2              
 101   2              /*Swap the IP Addresses in the ARP packet*/
 102   2              memcpy( arpPacket->targetIP, arpPacket->senderIP, sizeof(deviceIP) );
 103   2              memcpy( arpPacket->senderIP, deviceIP, sizeof(deviceIP));
 104   2              
 105   2              /*Set the opCode for an ARP Reply*/
 106   2              arpPacket->opCode = (ARPREPLY); 
 107   2              
 108   2              /*Send the Packet!*/
 109   2              return(MACWrite((unsigned char*) arpPacket, sizeof(ARP)));
 110   2          }else{
 111   2              /*The ARP Request is not for us,so we did nothing.*/
 112   2              return FALSE;
 113   2        }
 114   1        return FALSE;
 115   1      }
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 3   

 116          
 117          /* [] END OF FILE */
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _SendArpRequest (BEGIN)
                                           ; SOURCE LINE # 28
0000 900000      R     MOV     DPTR,#targetIP
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 35
0006 7B01              MOV     R3,#01H
0008 7A00        E     MOV     R2,#HIGH deviceMAC
000A 7900        E     MOV     R1,#LOW deviceMAC
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH arpPacket+06H
0016 7900        R     MOV     R1,#LOW arpPacket+06H
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 7E00              MOV     R6,#00H
0026 7F06              MOV     R7,#06H
0028 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 39
002B 7E00              MOV     R6,#00H
002D 7F06              MOV     R7,#06H
002F 7DFF              MOV     R5,#0FFH
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH arpPacket
0035 7900        R     MOV     R1,#LOW arpPacket
0037 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 42
003A 900000      R     MOV     DPTR,#arpPacket+0CH
003D 7408              MOV     A,#08H
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 7406              MOV     A,#06H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0044 900000      R     MOV     DPTR,#arpPacket+0EH
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A 7401              MOV     A,#01H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
004D 900000      R     MOV     DPTR,#arpPacket+010H
0050 7408              MOV     A,#08H
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
0056 900000      R     MOV     DPTR,#arpPacket+012H
0059 7406              MOV     A,#06H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
005C 900000      R     MOV     DPTR,#arpPacket+013H
005F 7404              MOV     A,#04H
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 5   

0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0062 900000      R     MOV     DPTR,#arpPacket+014H
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 7401              MOV     A,#01H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
006B 7E00              MOV     R6,#00H
006D 7F06              MOV     R7,#06H
006F 7D00              MOV     R5,#00H
0071 7B01              MOV     R3,#01H
0073 7A00        R     MOV     R2,#HIGH arpPacket+020H
0075 7900        R     MOV     R1,#LOW arpPacket+020H
0077 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 57
007A 7B01              MOV     R3,#01H
007C 7A00        E     MOV     R2,#HIGH deviceMAC
007E 7900        E     MOV     R1,#LOW deviceMAC
0080 C003              PUSH    AR3
0082 C002              PUSH    AR2
0084 C001              PUSH    AR1
0086 7B01              MOV     R3,#01H
0088 7A00        R     MOV     R2,#HIGH arpPacket+016H
008A 7900        R     MOV     R1,#LOW arpPacket+016H
008C A801              MOV     R0,AR1
008E AC02              MOV     R4,AR2
0090 AD03              MOV     R5,AR3
0092 D001              POP     AR1
0094 D002              POP     AR2
0096 D003              POP     AR3
0098 7E00              MOV     R6,#00H
009A 7F06              MOV     R7,#06H
009C 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 60
009F 900000      R     MOV     DPTR,#targetIP
00A2 120000      E     LCALL   ?C?PLDXDATA
00A5 C003              PUSH    AR3
00A7 C002              PUSH    AR2
00A9 C001              PUSH    AR1
00AB 7B01              MOV     R3,#01H
00AD 7A00        R     MOV     R2,#HIGH arpPacket+026H
00AF 7900        R     MOV     R1,#LOW arpPacket+026H
00B1 A801              MOV     R0,AR1
00B3 AC02              MOV     R4,AR2
00B5 AD03              MOV     R5,AR3
00B7 D001              POP     AR1
00B9 D002              POP     AR2
00BB D003              POP     AR3
00BD 7E00              MOV     R6,#00H
00BF 7F04              MOV     R7,#04H
00C1 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 63
00C4 7B01              MOV     R3,#01H
00C6 7A00        E     MOV     R2,#HIGH deviceIP
00C8 7900        E     MOV     R1,#LOW deviceIP
00CA C003              PUSH    AR3
00CC C002              PUSH    AR2
00CE C001              PUSH    AR1
00D0 7B01              MOV     R3,#01H
00D2 7A00        R     MOV     R2,#HIGH arpPacket+01CH
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 6   

00D4 7900        R     MOV     R1,#LOW arpPacket+01CH
00D6 A801              MOV     R0,AR1
00D8 AC02              MOV     R4,AR2
00DA AD03              MOV     R5,AR3
00DC D001              POP     AR1
00DE D002              POP     AR2
00E0 D003              POP     AR3
00E2 7E00              MOV     R6,#00H
00E4 7F04              MOV     R7,#04H
00E6 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 66
00E9 7B01              MOV     R3,#01H
00EB 7A00        R     MOV     R2,#HIGH arpPacket
00ED 7900        R     MOV     R1,#LOW arpPacket
00EF 7D2A              MOV     R5,#02AH
00F1 7C00              MOV     R4,#00H
00F3 120000      E     LCALL   _MACWrite
00F6 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 67
00F8         ?C0001:
00F8 22                RET     
             ; FUNCTION _SendArpRequest (END)

             ; FUNCTION _ReplyArpRequest (BEGIN)
                                           ; SOURCE LINE # 84
0000 900000      R     MOV     DPTR,#arpPacket
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 90
0006 7B01              MOV     R3,#01H
0008 7A00        E     MOV     R2,#HIGH deviceIP
000A 7900        E     MOV     R1,#LOW deviceIP
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 900000      R     MOV     DPTR,#arpPacket
0015 120000      E     LCALL   ?C?PLDXDATA
0018 E9                MOV     A,R1
0019 2426              ADD     A,#026H
001B F9                MOV     R1,A
001C EA                MOV     A,R2
001D 3400              ADDC    A,#00H
001F FA                MOV     R2,A
0020 A801              MOV     R0,AR1
0022 AC02              MOV     R4,AR2
0024 AD03              MOV     R5,AR3
0026 D001              POP     AR1
0028 D002              POP     AR2
002A D003              POP     AR3
002C 7E00              MOV     R6,#00H
002E 7F04              MOV     R7,#04H
0030 120000      E     LCALL   ?C?MEMCMPAMD
0033 EF                MOV     A,R7
0034 6003              JZ      $ + 5H
0036 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 94
0039 900000      R     MOV     DPTR,#arpPacket
003C 120000      E     LCALL   ?C?PLDXDATA
003F E9                MOV     A,R1
0040 2406              ADD     A,#06H
0042 F9                MOV     R1,A
0043 EA                MOV     A,R2
0044 3400              ADDC    A,#00H
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 7   

0046 FA                MOV     R2,A
0047 C003              PUSH    AR3
0049 C002              PUSH    AR2
004B C001              PUSH    AR1
004D 900000      R     MOV     DPTR,#arpPacket
0050 120000      E     LCALL   ?C?PLDXDATA
0053 A801              MOV     R0,AR1
0055 AC02              MOV     R4,AR2
0057 AD03              MOV     R5,AR3
0059 D001              POP     AR1
005B D002              POP     AR2
005D D003              POP     AR3
005F 7E00              MOV     R6,#00H
0061 7F06              MOV     R7,#06H
0063 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 95
0066 7B01              MOV     R3,#01H
0068 7A00        E     MOV     R2,#HIGH deviceMAC
006A 7900        E     MOV     R1,#LOW deviceMAC
006C C003              PUSH    AR3
006E C002              PUSH    AR2
0070 C001              PUSH    AR1
0072 900000      R     MOV     DPTR,#arpPacket
0075 120000      E     LCALL   ?C?PLDXDATA
0078 E9                MOV     A,R1
0079 2406              ADD     A,#06H
007B F9                MOV     R1,A
007C EA                MOV     A,R2
007D 3400              ADDC    A,#00H
007F FA                MOV     R2,A
0080 A801              MOV     R0,AR1
0082 AC02              MOV     R4,AR2
0084 AD03              MOV     R5,AR3
0086 D001              POP     AR1
0088 D002              POP     AR2
008A D003              POP     AR3
008C 7E00              MOV     R6,#00H
008E 7F06              MOV     R7,#06H
0090 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 98
0093 900000      R     MOV     DPTR,#arpPacket
0096 120000      E     LCALL   ?C?PLDXDATA
0099 E9                MOV     A,R1
009A 2416              ADD     A,#016H
009C F9                MOV     R1,A
009D EA                MOV     A,R2
009E 3400              ADDC    A,#00H
00A0 FA                MOV     R2,A
00A1 C003              PUSH    AR3
00A3 C002              PUSH    AR2
00A5 C001              PUSH    AR1
00A7 900000      R     MOV     DPTR,#arpPacket
00AA 120000      E     LCALL   ?C?PLDXDATA
00AD E9                MOV     A,R1
00AE 2420              ADD     A,#020H
00B0 F9                MOV     R1,A
00B1 EA                MOV     A,R2
00B2 3400              ADDC    A,#00H
00B4 FA                MOV     R2,A
00B5 A801              MOV     R0,AR1
00B7 AC02              MOV     R4,AR2
00B9 AD03              MOV     R5,AR3
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 8   

00BB D001              POP     AR1
00BD D002              POP     AR2
00BF D003              POP     AR3
00C1 7E00              MOV     R6,#00H
00C3 7F06              MOV     R7,#06H
00C5 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 99
00C8 7B01              MOV     R3,#01H
00CA 7A00        E     MOV     R2,#HIGH deviceMAC
00CC 7900        E     MOV     R1,#LOW deviceMAC
00CE C003              PUSH    AR3
00D0 C002              PUSH    AR2
00D2 C001              PUSH    AR1
00D4 900000      R     MOV     DPTR,#arpPacket
00D7 120000      E     LCALL   ?C?PLDXDATA
00DA E9                MOV     A,R1
00DB 2416              ADD     A,#016H
00DD F9                MOV     R1,A
00DE EA                MOV     A,R2
00DF 3400              ADDC    A,#00H
00E1 FA                MOV     R2,A
00E2 A801              MOV     R0,AR1
00E4 AC02              MOV     R4,AR2
00E6 AD03              MOV     R5,AR3
00E8 D001              POP     AR1
00EA D002              POP     AR2
00EC D003              POP     AR3
00EE 7E00              MOV     R6,#00H
00F0 7F06              MOV     R7,#06H
00F2 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 102
00F5 900000      R     MOV     DPTR,#arpPacket
00F8 120000      E     LCALL   ?C?PLDXDATA
00FB E9                MOV     A,R1
00FC 241C              ADD     A,#01CH
00FE F9                MOV     R1,A
00FF EA                MOV     A,R2
0100 3400              ADDC    A,#00H
0102 FA                MOV     R2,A
0103 C003              PUSH    AR3
0105 C002              PUSH    AR2
0107 C001              PUSH    AR1
0109 900000      R     MOV     DPTR,#arpPacket
010C 120000      E     LCALL   ?C?PLDXDATA
010F E9                MOV     A,R1
0110 2426              ADD     A,#026H
0112 F9                MOV     R1,A
0113 EA                MOV     A,R2
0114 3400              ADDC    A,#00H
0116 FA                MOV     R2,A
0117 A801              MOV     R0,AR1
0119 AC02              MOV     R4,AR2
011B AD03              MOV     R5,AR3
011D D001              POP     AR1
011F D002              POP     AR2
0121 D003              POP     AR3
0123 7E00              MOV     R6,#00H
0125 7F04              MOV     R7,#04H
0127 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 103
012A 7B01              MOV     R3,#01H
012C 7A00        E     MOV     R2,#HIGH deviceIP
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 9   

012E 7900        E     MOV     R1,#LOW deviceIP
0130 C003              PUSH    AR3
0132 C002              PUSH    AR2
0134 C001              PUSH    AR1
0136 900000      R     MOV     DPTR,#arpPacket
0139 120000      E     LCALL   ?C?PLDXDATA
013C E9                MOV     A,R1
013D 241C              ADD     A,#01CH
013F F9                MOV     R1,A
0140 EA                MOV     A,R2
0141 3400              ADDC    A,#00H
0143 FA                MOV     R2,A
0144 A801              MOV     R0,AR1
0146 AC02              MOV     R4,AR2
0148 AD03              MOV     R5,AR3
014A D001              POP     AR1
014C D002              POP     AR2
014E D003              POP     AR3
0150 7E00              MOV     R6,#00H
0152 7F04              MOV     R7,#04H
0154 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 106
0157 900000      R     MOV     DPTR,#arpPacket
015A 120000      E     LCALL   ?C?PLDXDATA
015D E9                MOV     A,R1
015E 2414              ADD     A,#014H
0160 F9                MOV     R1,A
0161 EA                MOV     A,R2
0162 3400              ADDC    A,#00H
0164 FA                MOV     R2,A
0165 E4                CLR     A
0166 75F002            MOV     B,#02H
0169 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 109
016C 900000      R     MOV     DPTR,#arpPacket
016F 120000      E     LCALL   ?C?PLDXDATA
0172 7D2A              MOV     R5,#02AH
0174 7C00              MOV     R4,#00H
0176 120000      E     LCALL   _MACWrite
0179 7E00              MOV     R6,#00H
017B 22                RET     
                                           ; SOURCE LINE # 110
017C 8005              SJMP    ?C0004
017E         ?C0002:
                                           ; SOURCE LINE # 112
017E 7E00              MOV     R6,#00H
0180 7F01              MOV     R7,#01H
0182 22                RET     
                                           ; SOURCE LINE # 113
0183         ?C0004:
                                           ; SOURCE LINE # 114
0183 7E00              MOV     R6,#00H
0185 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 115
0187         ?C0003:
0187 22                RET     
             ; FUNCTION _ReplyArpRequest (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    641    ----
C51 COMPILER V9.03   ARP                                                                   07/02/2012 19:47:00 PAGE 10  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
