C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE DIETEMP
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\DieTemp.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\DieTemp.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\DieTemp.lst) CD DB NOIP OT(0,
                    -SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\DieTemp.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: DieTemp_DieTemp.c  
   3          * Version 1.80
   4          *
   5          * Description:
   6          *  Provides the API to acquire the die temperature.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions, 
  11          * disclaimers, and limitations in the end user license agreement accompanying 
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          
  16          #include <CYDEVICE_TRM.H>
  17          #include <DieTemp.H>
  18          
  19          
  20          #define DieTemp_NUMBER_OF_SAMPLES  0x1u
  21          #define DieTemp_TIMER_PERIOD       0xFFFu
  22          #define DieTemp_CLK_DIV_SELECT     0x4u
  23          
  24          #define SPC_CLK_PERIOD                      120 /* nano sec. */
  25          
  26          #define NANO_TO_MILLI_FACTOR                1000000
  27          #define FRM_EXEC_TIME                       (1000) /* In nano seconds. */
  28          #define GET_TEMPR_TIME                      (1 << (DieTemp_NUMBER_OF_SAMPLES + 1)) * \
  29                                                      (SPC_CLK_PERIOD * DieTemp_CLK_DIV_SELECT) * \
  30                                                      DieTemp_TIMER_PERIOD + \
  31                                                      FRM_EXEC_TIME
  32          
  33          #define DieTemp_MAX_WAIT           ((GET_TEMPR_TIME + NANO_TO_MILLI_FACTOR - 1) / NANO_TO_MILLI_FACTOR) /*
             - In milli seconds. */
  34          
  35          
  36          /*******************************************************************************
  37          * Function Name: DieTemp_Start
  38          ********************************************************************************
  39          * 
  40          * Summary:
  41          *  Starts the SPC command to get the die temperature. If this function is
  42          *  called successfuly. The SPC will be locked and DieTemp_QueryDieTemp
  43          *  will have to be successfuly called to unlock it. CySpcUnlock() can also
  44          *  be called if the caller decides not to finish the temperature reading.
  45          *
  46          * Parameters:
  47          *  void.
  48          *
  49          * Return:
  50          *  CYRET_STARTED if the spc command was started sucessfuly.
  51          *  CYRET_UNKNOWN if the spc command failed.
  52          *  CYRET_LOCKED if the spc was busy.
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 2   

  53          *
  54          *******************************************************************************/
  55          cystatus DieTemp_Start(void) 
  56          {
  57   1          cystatus status;
  58   1          
  59   1          /* Plan for failure. */
  60   1          status = CYRET_UNKNOWN;
  61   1          
  62   1          /* Power up the SPC. */
  63   1          CySpcStart();
  64   1      
  65   1          if(CySpcLock() == CYRET_SUCCESS)
  66   1          {
  67   2              #if(CY_PSOC5A)
                          if(CYRET_STARTED == CySpcGetTemp(DieTemp_NUMBER_OF_SAMPLES,
                                                           DieTemp_TIMER_PERIOD,
                                                           DieTemp_CLK_DIV_SELECT))
                          {
                              status = CYRET_STARTED;
                          }
                      #else
  75   2                  if(CYRET_STARTED == CySpcGetTemp(DieTemp_NUMBER_OF_SAMPLES))
  76   2                  {
  77   3                      status = CYRET_STARTED;
  78   3                  }
  79   2              #endif  /* (CY_PSOC5A) */
  80   2              CySpcUnlock();
  81   2          }
  82   1          else
  83   1          {
  84   2              status = CYRET_LOCKED;
  85   2          }
  86   1          return (status);
  87   1      }
  88          
  89          
  90          /*******************************************************************************
  91          * FUNCTION NAME:   DieTemp_Stop
  92          ********************************************************************************
  93          *
  94          * Summary:
  95          *  Stops the temperature reading
  96          *
  97          * Parameters:  
  98          *  void
  99          *
 100          * Return: 
 101          *  void
 102          *
 103          *******************************************************************************/
 104          void DieTemp_Stop(void) 
 105          {
 106   1          CySpcStop();
 107   1      }
 108          
 109          
 110          /*******************************************************************************
 111          * Function Name: DieTemp_Query
 112          ********************************************************************************
 113          *
 114          * Summary:
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 3   

 115          *  Querys the SPC to see if the termperature command is finished.
 116          *   
 117          * Parameters:
 118          *  temperature: Address to store the two byte temperature value.
 119          * 
 120          * Return:
 121          *  CYRET_SUCCESS if the temperature command completed sucessfully.
 122          *  CYRET_UNKNOWN if the there was an spc failure.
 123          *  CYRET_STARTED if the temperature command has not completed.
 124          *  CYRET_TIMEOUT if waited to long before reading data.
 125          *
 126          *******************************************************************************/
 127          cystatus DieTemp_Query(int16 * temperature) 
 128          {
 129   1          uint8 temp[2];
 130   1          cystatus status;
 131   1      
 132   1      
 133   1          if(CY_SPC_BUSY)
 134   1          {
 135   2              if((CY_SPC_STATUS_REG>>2) == CYRET_SUCCESS)
 136   2              {
 137   3                  /* See if any data is ready. */
 138   3                  if(CySpcReadData(temp, 2) == 2u)
 139   3                  {
 140   4                      if(temp[0])
 141   4                      {
 142   5                          *temperature = (int16) ((uint16) temp[1]);
 143   5                      }
 144   4                      else
 145   4                      {
 146   5                          *temperature = (int16) - ((uint16) temp[1]);
 147   5                      }
 148   4                      status = CYRET_SUCCESS;
 149   4                  }
 150   3                  else
 151   3                  {
 152   4                      status = CYRET_UNKNOWN;
 153   4                  }
 154   3              }
 155   2              else
 156   2              {
 157   3                  status = CYRET_STARTED;
 158   3              }
 159   2          }
 160   1          else
 161   1          {
 162   2              status = CYRET_TIMEOUT;
 163   2          }
 164   1      
 165   1          if(status != CYRET_STARTED)
 166   1          {
 167   2              /* Unlock the SPC so someone else can use it. */
 168   2              CySpcUnlock();
 169   2          }
 170   1          return (status);
 171   1      }
 172          
 173          
 174          /*******************************************************************************
 175          * Function Name: DieTemp_GetTemp
 176          ********************************************************************************
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 4   

 177          *
 178          * Summary:
 179          *  Sets up the command to get the temperature and blocks until finished. After
 180          *  DieTemp_MAX_WAIT ticks the function will return even if the
 181          *  SPC has not finished.
 182          *   
 183          * Parameters:
 184          *  temperature: Address to store the two byte temperature value.
 185          *
 186          * Return:
 187          *  CYRET_SUCCESS if the command was completed sucessfuly.
 188          *  Status code from DieTemp_Start or DieTemp_Query
 189          *
 190          *******************************************************************************/
 191          cystatus DieTemp_GetTempT(int16 * temperature) 
 192          {
 193   1          uint16 ms;
 194   1          cystatus status;
 195   1      
 196   1          /* Start the temp reading */
 197   1          status = DieTemp_Start();
 198   1      
 199   1          if(status == CYRET_STARTED)
 200   1          {
 201   2              for (ms=DieTemp_MAX_WAIT; ms>0; ms--)
 202   2              {
 203   3                  status = DieTemp_Query(temperature);
 204   3                  if(status != CYRET_STARTED)
 205   3                  {
 206   4                      break;
 207   4                  }
 208   3                  CyDelay(1);
 209   3              }
 210   2          }
 211   1      
 212   1          return status;
 213   1      }
 214          cystatus DieTemp_GetTemp(int16 * temperature) 
 215          {
 216   1          cystatus status;
 217   1          uint8 count = 2;
 218   1          while (count!=0)
 219   1          {
 220   2              status = DieTemp_GetTempT(temperature);
 221   2              if (status != CYRET_SUCCESS) 
 222   2              {
 223   3                  break;
 224   3              }
 225   2              count--;
 226   2          }
 227   1          return status;
 228   1      }
 229          
 230          
 231          /* [] END OF FILE */
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DieTemp_Start (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 60
0000 900000      R     MOV     DPTR,#status
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0006 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 65
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 7014              JNZ     ?C0001
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 75
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 B40706            CJNE    A,#07H,?C0002
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0018 900000      R     MOV     DPTR,#status
001B 7407              MOV     A,#07H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
001E         ?C0002:
                                           ; SOURCE LINE # 80
001E 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 81
0021 8006              SJMP    ?C0003
0023         ?C0001:
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0023 900000      R     MOV     DPTR,#status
0026 7404              MOV     A,#04H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0029         ?C0003:
                                           ; SOURCE LINE # 86
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 87
002E         ?C0004:
002E 22                RET     
             ; FUNCTION DieTemp_Start (END)

             ; FUNCTION DieTemp_Stop (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 120000      E     LCALL   CySpcStop
                                           ; SOURCE LINE # 107
0003         ?C0005:
0003 22                RET     
             ; FUNCTION DieTemp_Stop (END)

             ; FUNCTION _DieTemp_Query (BEGIN)
                                           ; SOURCE LINE # 127
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 6   

0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 133
0006 904722            MOV     DPTR,#04722H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 5402              ANL     A,#02H
000E FF                MOV     R7,A
000F 7E00              MOV     R6,#00H
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 706C              JNZ     ?C0006
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
0015 904722            MOV     DPTR,#04722H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 13                RRC     A
001C 13                RRC     A
001D 543F              ANL     A,#03FH
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 7056              JNZ     ?C0007
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
0023 7B01              MOV     R3,#01H
0025 7A00        R     MOV     R2,#HIGH temp
0027 7900        R     MOV     R1,#LOW temp
0029 7D02              MOV     R5,#02H
002B 120000      E     LCALL   _CySpcReadData
002E EF                MOV     A,R7
002F 6402              XRL     A,#02H
0031 703E              JNZ     ?C0008
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0033 900000      R     MOV     DPTR,#temp
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6015              JZ      ?C0009
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
003B 900000      R     MOV     DPTR,#temp+01H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 7E00              MOV     R6,#00H
0042 900000      R     MOV     DPTR,#temperature
0045 120000      E     LCALL   ?C?PLDXDATA
0048 EE                MOV     A,R6
0049 8FF0              MOV     B,R7
004B 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 143
004E 801A              SJMP    ?C0010
0050         ?C0009:
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0050 900000      R     MOV     DPTR,#temp+01H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 7   

0055 7E00              MOV     R6,#00H
0057 C3                CLR     C
0058 E4                CLR     A
0059 9F                SUBB    A,R7
005A FF                MOV     R7,A
005B E4                CLR     A
005C 9E                SUBB    A,R6
005D FE                MOV     R6,A
005E 900000      R     MOV     DPTR,#temperature
0061 120000      E     LCALL   ?C?PLDXDATA
0064 EE                MOV     A,R6
0065 8FF0              MOV     B,R7
0067 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 147
006A         ?C0010:
                                           ; SOURCE LINE # 148
006A 900000      R     MOV     DPTR,#status
006D E4                CLR     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
006F 8016              SJMP    ?C0013
0071         ?C0008:
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0071 900000      R     MOV     DPTR,#status
0074 74FF              MOV     A,#0FFH
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0077         ?C0011:
                                           ; SOURCE LINE # 154
0077 800E              SJMP    ?C0013
0079         ?C0007:
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0079 900000      R     MOV     DPTR,#status
007C 7407              MOV     A,#07H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
007F         ?C0012:
                                           ; SOURCE LINE # 159
007F 8006              SJMP    ?C0013
0081         ?C0006:
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0081 900000      R     MOV     DPTR,#status
0084 7410              MOV     A,#010H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0087         ?C0013:
                                           ; SOURCE LINE # 165
0087 900000      R     MOV     DPTR,#status
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D 6407              XRL     A,#07H
008F 6003              JZ      ?C0014
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 168
0091 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 169
0094         ?C0014:
                                           ; SOURCE LINE # 170
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 8   

0094 900000      R     MOV     DPTR,#status
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
                                           ; SOURCE LINE # 171
0099         ?C0015:
0099 22                RET     
             ; FUNCTION _DieTemp_Query (END)

             ; FUNCTION _DieTemp_GetTempT (BEGIN)
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 197
0006 120000      R     LCALL   DieTemp_Start
0009 900000      R     MOV     DPTR,#status
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
000E 900000      R     MOV     DPTR,#status
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 6407              XRL     A,#07H
0016 7049              JNZ     ?C0016
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0018 900000      R     MOV     DPTR,#ms
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
0021         ?C0017:
0021 900000      R     MOV     DPTR,#ms
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 D3                SETB    C
002A EF                MOV     A,R7
002B 9400              SUBB    A,#00H
002D EE                MOV     A,R6
002E 9400              SUBB    A,#00H
0030 402F              JC      ?C0016
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0032 900000      R     MOV     DPTR,#temperature
0035 120000      E     LCALL   ?C?PLDXDATA
0038 120000      R     LCALL   _DieTemp_Query
003B 900000      R     MOV     DPTR,#status
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0040 900000      R     MOV     DPTR,#status
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 B40718            CJNE    A,#07H,?C0016
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 9   

                                           ; SOURCE LINE # 207
0049         ?C0020:
                                           ; SOURCE LINE # 208
0049 7F01              MOV     R7,#01H
004B 7E00              MOV     R6,#00H
004D 7D00              MOV     R5,#00H
004F 7C00              MOV     R4,#00H
0051 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 209
0054         ?C0019:
0054 900000      R     MOV     DPTR,#ms
0057 74FF              MOV     A,#0FFH
0059 75F0FF            MOV     B,#0FFH
005C 120000      E     LCALL   ?C?IILDX
005F 80C0              SJMP    ?C0017
0061         ?C0018:
                                           ; SOURCE LINE # 210
0061         ?C0016:
                                           ; SOURCE LINE # 212
0061 900000      R     MOV     DPTR,#status
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
                                           ; SOURCE LINE # 213
0066         ?C0021:
0066 22                RET     
             ; FUNCTION _DieTemp_GetTempT (END)

             ; FUNCTION _DieTemp_GetTemp (BEGIN)
                                           ; SOURCE LINE # 214
0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 217
0006 900000      R     MOV     DPTR,#count
0009 7402              MOV     A,#02H
000B F0                MOVX    @DPTR,A
000C         ?C0022:
                                           ; SOURCE LINE # 218
000C 900000      R     MOV     DPTR,#count
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 601E              JZ      ?C0023
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0014 900000      R     MOV     DPTR,#temperature
0017 120000      E     LCALL   ?C?PLDXDATA
001A 120000      R     LCALL   _DieTemp_GetTempT
001D 900000      R     MOV     DPTR,#status
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0022 900000      R     MOV     DPTR,#status
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 7008              JNZ     ?C0023
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
002A         ?C0024:
                                           ; SOURCE LINE # 225
C51 COMPILER V9.03   DIETEMP                                                               07/02/2012 19:47:03 PAGE 10  

002A 900000      R     MOV     DPTR,#count
002D E0                MOVX    A,@DPTR
002E 14                DEC     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0030 80DA              SJMP    ?C0022
0032         ?C0023:
                                           ; SOURCE LINE # 227
0032 900000      R     MOV     DPTR,#status
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
                                           ; SOURCE LINE # 228
0037         ?C0025:
0037 22                RET     
             ; FUNCTION _DieTemp_GetTemp (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
